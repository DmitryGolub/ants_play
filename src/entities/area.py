from typing import Optional

from dataclasses import dataclass
from src.lib import getter, sender


@dataclass
class Food:
    q: int
    r: int
    type: int
    amount: int


@dataclass
class Ant:
    q: int
    r: int
    type: int
    health: int
    id: str
    food: Food | None = None


@dataclass
class Point:
    q: int
    r: int
    cell_type: int  # —Ç–∏–ø –∫–ª–µ—Ç–∫–∏ (1-–º—É—Ä–∞–≤–µ–π–Ω–∏–∫, 2-–ø—É—Å—Ç–æ–π, 3-–≥—Ä—è–∑—å, 4-–∫–∏—Å–ª–æ—Ç–∞, 5-–∫–∞–º–µ–Ω—å)
    cost: int  # —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ö–æ–¥–∞ –ø–æ –∫–ª–µ—Ç–∫–∏
    friend: Ant | None = None  # –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥-–º—É—Ä–∞–≤–µ–π, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ None
    enemy: Ant | None = None  # –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–∞–≥-–º—É—Ä–∞–≤–µ–π, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ None
    food: Food | None = None  # –µ–¥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    is_spot: bool = False  # —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª–µ—Ç–∫–∞ —Å–ø–æ—Ç–æ–º
    is_home: bool = False  # —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª–µ–∫—Ç–∞ –¥–æ–º–æ–º


class Area:
    def __init__(self):
        self.points: list[Point] = []
        self.coord_to_point: dict[tuple, Point] = {}

    def getPoint(self, q: int, r: int) -> Point | None:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ—á–∫—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        return self.coord_to_point.get((q, r))

    def getVegetables(self) -> list[Point]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ—á–∫–∏ —Å –µ–¥–æ–π"""
        return [p for p in self.points if p.food is not None]

    def getEnemies(self) -> list[Point]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ—á–∫–∏ —Å –≤—Ä–∞–≥–∞–º–∏"""
        return [p for p in self.points if p.enemy is not None]

    def getSpot(self) -> Optional[Point]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–æ—Ç"""
        for p in self.points:
            if p.is_spot:
                return p
        return None

    def updatePoint(self, point: Point, **kwargs):
        for key, value in kwargs.items():
            if hasattr(point, key):
                setattr(point, key, value)
            else:
                print(f"–¢–æ—á–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –ø–æ–ª—è '{key}'")

    def updateArea(self, response: dict):
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –∏–∑ –∫–∞—Ä—Ç—ã
        for cell in response.get('map', []):
            q, r = cell['q'], cell['r']
            point = Point(
                q=q,
                r=r,
                cell_type=cell['type'],
                cost=cell['cost'],
            )
            self.points.append(point)
            self.coord_to_point[(q, r)] = point

        # –û—Ç–º–µ—á–∞–µ–º home/spot
        home_coords = {(h['q'], h['r']) for h in response.get('home', [])}
        spot_coord = (response['spot']['q'], response['spot']['r']) if 'spot' in response else None
        for point in self.points:
            if (point.q, point.r) in home_coords:
                point.is_home = True
            if spot_coord and (point.q, point.r) == spot_coord:
                point.is_spot = True

        # –ö–ª–∞–¥—ë–º –µ–¥—É
        for food in response.get('food', []):
            coord = (food['q'], food['r'])
            if coord in self.coord_to_point:
                self.coord_to_point[coord].food = Food(**food)

        # –ö–ª–∞–¥—ë–º —Å–≤–æ–∏—Ö –º—É—Ä–∞–≤—å—ë–≤
        for ant in response.get('ants', []):
            coord = (ant['q'], ant['r'])
            f = ant['food']
            food_obj = Food(**f) if f and f.get("amount", 0) else None
            ant_obj = Ant(
                q=ant['q'],
                r=ant['r'],
                type=ant['type'],
                health=ant['health'],
                id=ant['id'],
                food=food_obj
            )
            if coord in self.coord_to_point:
                self.coord_to_point[coord].friend = ant_obj

        # –ö–ª–∞–¥—ë–º –≤—Ä–∞–≥–æ–≤
        for enemy in response.get('enemies', []):
            coord = (enemy['q'], enemy['r'])
            f = enemy.get('food', None)
            food_obj = Food(**f) if f and f.get("amount", 0) else None
            ant_obj = Ant(
                q=enemy['q'],
                r=enemy['r'],
                type=enemy['type'],
                health=enemy['health'],
                id=str(enemy.get('id', 'enemy')),  # –µ—Å–ª–∏ id –Ω–µ—Ç - –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —á—Ç–æ-—Ç–æ —Å–≤–æ—ë
                food=food_obj
            )
            if coord in self.coord_to_point:
                self.coord_to_point[coord].enemy = ant_obj

    def print_map(self):
        if not self.points:
            print("–ö–∞—Ä—Ç–∞ –ø—É—Å—Ç–∞!")
            return

        min_q = min(p.q for p in self.points)
        max_q = max(p.q for p in self.points)
        min_r = min(p.r for p in self.points)
        max_r = max(p.r for p in self.points)

        # –°–∏–º–≤–æ–ª—ã –¥–ª—è –≤—Å–µ–≥–æ
        cell_symbols = {
            1: "üè†",  # –º—É—Ä–∞–≤–µ–π–Ω–∏–∫
            2: "‚¨°",  # –ø—É—Å—Ç–æ–π
            3: "üü´",  # –≥—Ä—è–∑—å
            4: "üß™",  # –∫–∏—Å–ª–æ—Ç–∞
            5: "ü™®",  # –∫–∞–º–Ω–∏
        }
        ant_symbols = {0: "üßë‚Äçüåæ", 1: "üõ°Ô∏è", 2: "ü¶ü"}  # —Ä–∞–±–æ—á–∏–π, –±–æ–µ—Ü, —Ä–∞–∑–≤–µ–¥—á–∏–∫
        enemy_symbol = "üëπ"
        food_symbols = {1: "üçè", 2: "üçû", 3: "üçØ"}
        spot_symbol = "‚≠ê"
        empty = "  "

        map_dict = {(p.q, p.r): p for p in self.points}

        print(f"–•–æ–¥: {getattr(self, 'turnNo', '?')}  –û—á–∫–∏: {getattr(self, 'score', '?')}\n")
        for r in range(min_r, max_r + 1):
            line = " " * ((r - min_r) % 2 * 2)
            for q in range(min_q, max_q + 1):
                point = map_dict.get((q, r))
                if not point:
                    line += empty
                    continue

                # 1. –í—Ä–∞–≥
                if point.enemy:
                    hp = point.enemy.health
                    line += f"{enemy_symbol}"
                # 2. –°–≤–æ–π –º—É—Ä–∞–≤–µ–π
                elif point.friend:
                    sym = ant_symbols.get(point.friend.type, "üêú")
                    # –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å HP –º–µ–ª–∫–æ –∏–ª–∏ —Ü–∏—Ñ—Ä–æ–π, –µ—Å–ª–∏ –Ω–∞–¥–æ:
                    line += f"{sym}"
                # 3. –ï–¥–∞
                elif point.food:
                    fs = food_symbols.get(point.food.type, "‚ùì")
                    line += f"{fs}"
                # 4. –°–ø–æ—Ç (—Ü–µ–Ω—Ç—Ä –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∞)
                elif point.is_spot:
                    line += spot_symbol
                # 5. –î–æ–º
                elif point.is_home:
                    line += "üè°"
                # 6. –ü—Ä–æ—Å—Ç–æ –∫–ª–µ—Ç–∫–∞
                else:
                    line += cell_symbols.get(point.cell_type, "‚¨°")
            print(line)

        print("\n–õ–µ–≥–µ–Ω–¥–∞:")
        print("üßë‚Äçüåæ ‚Äî —Ä–∞–±–æ—á–∏–π   üõ°Ô∏è ‚Äî –±–æ–µ—Ü   ü¶ü ‚Äî —Ä–∞–∑–≤–µ–¥—á–∏–∫")
        print(f"{enemy_symbol} ‚Äî –≤—Ä–∞–≥")
        print("üçè ‚Äî —è–±–ª–æ–∫–æ   üçû ‚Äî —Ö–ª–µ–±   üçØ ‚Äî –Ω–µ–∫—Ç–∞—Ä")
        print("üè° ‚Äî –≥–µ–∫—Å –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∞   ‚≠ê ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –≥–µ–∫—Å –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∞")
        print("üü´ ‚Äî –≥—Ä—è–∑—å   üß™ ‚Äî –∫–∏—Å–ª–æ—Ç–∞   ü™® ‚Äî –∫–∞–º–µ–Ω—å   ‚¨° ‚Äî –ø—É—Å—Ç–æ–π")

        # –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Å–ø–∏—Å–∫–∏ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        friends = [p for p in self.points if p.friend]
        enemies = [p for p in self.points if p.enemy]
        foods = [p for p in self.points if p.food]
        if friends:
            print("\n–¢–≤–æ–∏ –º—É—Ä–∞–≤—å–∏:")
            for p in friends:
                a = p.friend
                tstr = {0: "—Ä–∞–±–æ—á–∏–π", 1: "–±–æ–µ—Ü", 2: "—Ä–∞–∑–≤–µ–¥—á–∏–∫"}.get(a.type, "?")
                cargo = f", –Ω–µ—Å—ë—Ç: {food_symbols.get(a.food.type, '?')}{a.food.amount}" if a.food else ""
                print(f" - {tstr} @({a.q},{a.r}) HP:{a.health}{cargo}")

        if enemies:
            print("\n–í—Ä–∞–≥–∏ —Ä—è–¥–æ–º:")
            for p in enemies:
                e = p.enemy
                tstr = {0: "—Ä–∞–±–æ—á–∏–π", 1: "–±–æ–µ—Ü", 2: "—Ä–∞–∑–≤–µ–¥—á–∏–∫"}.get(e.type, "?")
                print(f" - {tstr} @({e.q},{e.r}) HP:{e.health}")

        if foods:
            print("\n–†–µ—Å—É—Ä—Å—ã –Ω–∞ –ø–æ–ª–µ:")
            for p in foods:
                f = p.food
                tstr = {1: "—è–±–ª–æ–∫–æ", 2: "—Ö–ª–µ–±", 3: "–Ω–µ–∫—Ç–∞—Ä"}.get(f.type, "?")
                print(f" - {tstr} @({f.q},{f.r}) x {f.amount}")

